// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id            String   @id @default(uuid())
  name          String   @unique
  contactNumber String   @unique
  address       String?
  password      String
  barangayId    String
  barangay      Barangay @relation(fields: [barangayId], references: [id])
}

model Donor {
  id            String     @id @default(uuid())
  name          String     @unique
  orgName       String?
  contactNumber String     @unique
  address       String?
  password      String
  Comment       Comment[]
  Like          Like[]
  donations     Donation[]
}

model BarangayRequestPost {
  id              String     @id @default(uuid())
  area            String
  person          String
  typeOfCalamity  String
  inKind          Json
  specifications  Json
  contactNumber   String
  dropOffAddress  String
  dropOffLandmark String
  image           Bytes?     @db.ByteA
  dateTime        DateTime   @default(now())
  batchNumber     Int
  likes           Like[]     @relation("BarangayRequestPostLikes")
  comments        Comment[]  @relation("BarangayRequestPostComments")
  Barangay        Barangay?  @relation(fields: [barangayId], references: [id])
  barangayId      String?
  donations       Donation[]
}

model Like {
  id                     String                @id @default(uuid())
  userId                 String
  user                   Donor                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  barangayRequestPostId  String?
  barangayRequestPost    BarangayRequestPost?  @relation("BarangayRequestPostLikes", fields: [barangayRequestPostId], references: [id], onDelete: Cascade)
  recipientRequestPostId String?
  recipientRequestPost   RecipientRequestPost? @relation("RecipientRequestPostLikes", fields: [recipientRequestPostId], references: [id], onDelete: Cascade)
  createdAt              DateTime              @default(now())

  @@unique([userId, barangayRequestPostId])
  @@unique([userId, recipientRequestPostId])
}

model Comment {
  id                     String                @id @default(uuid())
  content                String                @db.Text
  userId                 String
  user                   Donor                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  barangayRequestPostId  String?
  barangayRequestPost    BarangayRequestPost?  @relation("BarangayRequestPostComments", fields: [barangayRequestPostId], references: [id], onDelete: Cascade)
  recipientRequestPostId String?
  recipientRequestPost   RecipientRequestPost? @relation("RecipientRequestPostComments", fields: [recipientRequestPostId], references: [id], onDelete: Cascade)
  createdAt              DateTime              @default(now())
}

model Batch {
  id          String   @id @default(uuid())
  batchNumber String   @unique
  description String?
  donationIds String
  createdAt   DateTime @default(now())
}

model RecipientRequestPost {
  id                  String    @id @default(uuid())
  completeName        String    @db.VarChar(191)
  age                 Int
  area                String
  noOfFamilyMembers   Int
  numberOfChildren    Int?
  ageGroupInfant      Int?
  ageGroupEarlyChild  Int?
  ageGroupMiddleChild Int?
  ageGroupAdolescent  Int?
  contactNumber       String    @db.VarChar(11)
  emailAddress        String?   @db.VarChar(191)
  typeOfCalamity      String    @db.VarChar(191)
  inKindNecessities   String    @db.Text
  specifications      String    @db.Text
  uploadedPhoto       Bytes?    @db.ByteA
  dateTime            DateTime  @default(now())
  likes               Like[]    @relation("RecipientRequestPostLikes")
  comments            Comment[] @relation("RecipientRequestPostComments")
  barangayId          String?
  Barangay            Barangay? @relation(fields: [barangayId], references: [id])
}

model Donation {
  id                    String              @id @default(uuid())
  controlNumber         String              @unique
  donorId               String
  donor                 Donor               @relation(fields: [donorId], references: [id], onDelete: Cascade)
  barangayId            String
  barangay              Barangay            @relation(fields: [barangayId], references: [id], onDelete: Cascade)
  donationStatus        DonationStatus
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  donationItems         DonationItem[]
  statusLogs            DonationStatusLog[]
  barangayRequestPostId String
  BarangayRequestPost   BarangayRequestPost @relation(fields: [barangayRequestPostId], references: [id], onDelete: Cascade)
}

model DonationItem {
  id         String   @id @default(uuid())
  donationId String
  donation   Donation @relation(fields: [donationId], references: [id], onDelete: Cascade)
  itemName   String
  quantity   Int
}

model DonationStatusLog {
  id         String         @id @default(uuid())
  donationId String
  donation   Donation       @relation(fields: [donationId], references: [id], onDelete: Cascade)
  status     DonationStatus
  timestamp  DateTime       @default(now())
  remarks    String?
}

model Barangay {
  id                    String                 @id @default(uuid()) // Change to UUID
  name                  String                 @unique
  donations             Donation[]
  Admin                 Admin[]
  barangayRequestPosts  BarangayRequestPost[]
  recipientRequestPosts RecipientRequestPost[]
  successStories        SuccessStory[]
  calamityImpact        calamityImpact[]
}

model SuccessStory {
  id                 String    @id @default(uuid())
  area               String?   @db.VarChar(191)
  barangayId         String?
  Barangay           Barangay? @relation(fields: [barangayId], references: [id], onDelete: Cascade)
  nameOfCalamity     String?   @db.VarChar(191)
  controlNumber      String?   @db.Text
  transactionIds     String?   @db.Text
  batchNumber        String?   @db.VarChar(191)
  numberOfRecipients Int?
  storyText          String?   @db.Text
  createdAt          DateTime  @default(now())
  image              Bytes?    @db.ByteA
}

model calamityImpact {
  id             String   @id @default(uuid())
  barangayId     String
  Barangay       Barangay @relation(fields: [barangayId], references: [id], onDelete: Cascade)
  area           String
  nameOfCalamity String
  storyText      String?  @db.Text
  createdAt      DateTime @default(now())
  image          Bytes?   @db.ByteA
}

enum DonationStatus {
  PLEDGED
  COLLECTED
  PROCESSING
  IN_TRANSIT
  RECEIVED
}
